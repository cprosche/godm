package godm

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestParseOPM(t *testing.T) {
	exampleSimple := `CCSDS_OPM_VERS = 3.0
CREATION_DATE = 2022-11-06T09:23:57
ORIGINATOR = JAXA

COMMENT GEOCENTRIC, CARTESIAN, EARTH FIXED
OBJECT_NAME = OSPREY 5
OBJECT_ID = 1998-999A
CENTER_NAME = EARTH
REF_FRAME = ITRF2000
TIME_SYSTEM = UTC

EPOCH = 2022-12-18T14:28:15.1172
X = 6503.514000
Y = 1239.647000
Z = -717.490000
X_DOT = -0.873160
Y_DOT = 8.740420
Z_DOT = -4.191076
MASS = 3000.000000
SOLAR_RAD_AREA = 18.770000
SOLAR_RAD_COEFF = 1.000000
DRAG_AREA = 18.770000
DRAG_COEFF = 2.500000`

	exampleWithKep := `CCSDS_OPM_VERS = 3.0
COMMENT Generated by GSOC, R. Kiehling
COMMENT Current intermediate orbit IO2 and maneuver planning data
CREATION_DATE = 2021-06-03T05:33:00.000
ORIGINATOR = GSOC

OBJECT_NAME = EUTELSAT W4
OBJECT_ID = 2021-028A
CENTER_NAME = EARTH
REF_FRAME = TOD
TIME_SYSTEM = UTC

COMMENT State Vector
EPOCH = 2021-06-03T00:00:00.000
X = 6655.9942 [km]
Y = -40218.5751 [km]
Z = -82.9177 [km]
X_DOT = 3.11548208 [km/s]
Y_DOT = 0.47042605 [km/s]
Z_DOT = -0.00101495 [km/s]

COMMENT Keplerian elements
SEMI_MAJOR_AXIS = 41399.5123 [km]
ECCENTRICITY = 0.020842611
INCLINATION = 0.117746 [deg]
RA_OF_ASC_NODE = 17.604721 [deg]
ARG_OF_PERICENTER = 218.242943 [deg]
TRUE_ANOMALY = 41.922339 [deg]
GM = 398600.4415 [km**3/s**2]

COMMENT Spacecraft parameters
MASS = 1913.000 [kg]
SOLAR_RAD_AREA = 10.000 [m**2]
SOLAR_RAD_COEFF = 1.300
DRAG_AREA = 10.000 [m**2]
DRAG_COEFF = 2.300

COMMENT 2 planned maneuvers

COMMENT First maneuver: AMF-3
COMMENT Non-impulsive, thrust direction fixed in inertial frame
MAN_EPOCH_IGNITION = 2021-06-03T09:00:34.1
MAN_DURATION = 132.60 [s]
MAN_DELTA_MASS = -18.418 [kg]
MAN_REF_FRAME = EME2000
MAN_DV_1 = -0.02325700 [km/s]
MAN_DV_2 = 0.01683160 [km/s]
MAN_DV_3 = -0.00893444 [km/s]

COMMENT Second maneuver: first station acquisition maneuver
COMMENT impulsive, thrust direction fixed in RTN frame
MAN_EPOCH_IGNITION = 2021-06-05T18:59:21.0
MAN_DURATION = 0.00 [s]
MAN_DELTA_MASS = -1.469 [kg]
MAN_REF_FRAME = RTN
MAN_DV_1 = 0.00101500 [km/s]
MAN_DV_2 = -0.00187300 [km/s]
MAN_DV_3 = 0.00000000 [km/s]`

	exampleWithCov := `CCSDS_OPM_VERS = 3.0
CREATION_DATE = 2022-11-06T09:23:57
ORIGINATOR = JAXA
MESSAGE_ID = OPM 201113719185

COMMENT GEOCENTRIC, CARTESIAN, EARTH FIXED
OBJECT_NAME = OSPREY 5
OBJECT_ID = 2022-999A
CENTER_NAME = EARTH
REF_FRAME = ITRF1997
TIME_SYSTEM = UTC

EPOCH = 2022-12-18T14:28:15.1172
X = 6503.514000
Y = 1239.647000
Z = -717.490000
X_DOT = -0.873160
Y_DOT = 8.740420
Z_DOT = -4.191076
MASS = 3000.000000
SOLAR_RAD_AREA = 18.770000
SOLAR_RAD_COEFF = 1.000000
DRAG_AREA = 18.770000
DRAG_COEFF = 2.500000
CX_X = 3.331349476038534e-04
CY_X = 4.618927349220216e-04
CY_Y = 6.782421679971363e-04
CZ_X = -3.070007847730449e-04
CZ_Y = -4.221234189514228e-04
CZ_Z = 3.231931992380369e-04
CX_DOT_X = -3.349365033922630e-07
CX_DOT_Y = -4.686084221046758e-07
CX_DOT_Z = 2.484949578400095e-07
CX_DOT_X_DOT = 4.296022805587290e-10
CY_DOT_X = -2.211832501084875e-07
CY_DOT_Y = -2.864186892102733e-07
CY_DOT_Z = 1.798098699846038e-07
CY_DOT_X_DOT = 2.608899201686016e-10
CY_DOT_Y_DOT = 1.767514756338532e-10
CZ_DOT_X = -3.041346050686871e-07
CZ_DOT_Y = -4.989496988610662e-07
CZ_DOT_Z = 3.540310904497689e-07
CZ_DOT_X_DOT = 1.869263192954590e-10
CZ_DOT_Y_DOT = 1.008862586240695e-10
CZ_DOT_Z_DOT = 6.224444338635500e-10`

	exampleWithParams := `CCSDS_OPM_VERS = 3.0
COMMENT Generated by GSOC, R. Kiehling
COMMENT Current intermediate orbit IO2 and maneuver planning data
CREATION_DATE = 2021-06-03T05:33:00.000
ORIGINATOR =    GSOC

OBJECT_NAME = EUTELSAT W4
OBJECT_ID = 2021-028A
CENTER_NAME = EARTH
REF_FRAME = TOD
TIME_SYSTEM = UTC

COMMENT State Vector
EPOCH = 2021-06-03T00:00:00.000
X = 6655.9942 [km]
Y = -40218.5751 [km]
Z = -82.9177 [km]
X_DOT = 3.11548208 [km/s]
Y_DOT = 0.47042605 [km/s]
Z_DOT = -0.00101495 [km/s]

COMMENT Keplerian elements
SEMI_MAJOR_AXIS = 41399.5123 [km]
ECCENTRICITY = 0.020842611
INCLINATION = 0.117746 [deg]
RA_OF_ASC_NODE = 17.604721 [deg]
ARG_OF_PERICENTER = 218.242943 [deg]
TRUE_ANOMALY = 41.922339 [deg]
GM = 398600.4415 [km**3/s**2]

COMMENT Spacecraft parameters
MASS = 1913.000 [kg]
SOLAR_RAD_AREA = 10.000 [m**2]
SOLAR_RAD_COEFF = 1.300
DRAG_AREA = 10.000 [m**2]
DRAG_COEFF = 2.300
COV_REF_FRAME = RTN
CX_X = 3.331349476038534e-04 [km**2]
CY_X = 4.618927349220216e-04 [km**2]
CY_Y = 6.782421679971363e-04 [km**2]
CZ_X = -3.070007847730449e-04 [km**2]
CZ_Y = -4.221234189514228e-04 [km**2]
CZ_Z = 3.231931992380369e-04 [km**2]
CX_DOT_X = -3.349365033922630e-07 [km**2/s]
CX_DOT_Y = -4.686084221046758e-07 [km**2/s]
CX_DOT_Z = 2.484949578400095e-07 [km**2/s]
CX_DOT_X_DOT = 4.296022805587290e-10 [km**2/s**2]
CY_DOT_X = -2.211832501084875e-07 [km**2/s]
CY_DOT_Y = -2.864186892102733e-07 [km**2/s]
CY_DOT_Z = 1.798098699846038e-07 [km**2/s]
CY_DOT_X_DOT = 2.608899201686016e-10 [km**2/s**2]
CY_DOT_Y_DOT = 1.767514756338532e-10 [km**2/s**2]
CZ_DOT_X = -3.041346050686871e-07 [km**2/s]
CZ_DOT_Y = -4.989496988610662e-07 [km**2/s]
CZ_DOT_Z = 3.540310904497689e-07 [km**2/s]
CZ_DOT_X_DOT = 1.869263192954590e-10 [km**2/s**2]
CZ_DOT_Y_DOT = 1.008862586240695e-10 [km**2/s**2]
CZ_DOT_Z_DOT = 6.224444338635500e-10 [km**2/s**2]

USER_DEFINED_EARTH_MODEL = WGS-84`

	t.Run("Parses header", func(t *testing.T) {
		t.Run("simple", func(t *testing.T) {
			expected := OPMHeader{
				CcsdsOpmVers: "3.0",
				CreationDate: time.Date(2022, 11, 6, 9, 23, 57, 0, time.UTC),
				Originator:   "JAXA",
			}

			got, err := ParseOPM(exampleSimple)

			assert.Nil(t, err)
			assert.Equal(t, expected, got.Header)
		})

		t.Run("with Kep", func(t *testing.T) {
			expected := OPMHeader{
				CcsdsOpmVers: "3.0",
				CreationDate: time.Date(2021, 6, 3, 5, 33, 0, 0, time.UTC),
				Originator:   "GSOC",
				Comments: []string{
					"Generated by GSOC, R. Kiehling",
					"Current intermediate orbit IO2 and maneuver planning data",
				},
			}

			got, err := ParseOPM(exampleWithKep)

			assert.Nil(t, err)
			assert.Equal(t, expected, got.Header)
		})

		t.Run("with covariance", func(t *testing.T) {
			expected := OPMHeader{
				CcsdsOpmVers: "3.0",
				CreationDate: time.Date(2022, 11, 6, 9, 23, 57, 0, time.UTC),
				Originator:   "JAXA",
				MessageId:    "OPM 201113719185",
			}

			got, err := ParseOPM(exampleWithCov)

			assert.Nil(t, err)
			assert.Equal(t, expected, got.Header)
		})

		t.Run("with parameters", func(t *testing.T) {
			expected := OPMHeader{
				CcsdsOpmVers: "3.0",
				CreationDate: time.Date(2021, 6, 3, 5, 33, 0, 0, time.UTC),
				Originator:   "GSOC",
				Comments: []string{
					"Generated by GSOC, R. Kiehling",
					"Current intermediate orbit IO2 and maneuver planning data",
				},
			}
			got, err := ParseOPM(exampleWithParams)

			assert.Nil(t, err)
			assert.Equal(t, expected, got.Header)
		})
	})

	t.Run("Parses MetaData", func(t *testing.T) {
		t.Run("simple", func(t *testing.T) {
			expected := OPMMetaData{
				Comments:   []string{"GEOCENTRIC, CARTESIAN, EARTH FIXED"},
				ObjectName: "OSPREY 5",
				ObjectId:   "1998-999A",
				CenterName: "EARTH",
				RefFrame:   "ITRF2000",
				TimeSystem: "UTC",
			}
			got, err := ParseOPM(exampleSimple)

			assert.Nil(t, err)
			assert.Equal(t, expected, got.MetaData)
		})

		t.Run("with Kep", func(t *testing.T) {
			expected := OPMMetaData{
				ObjectName: "EUTELSAT W4",
				ObjectId:   "2021-028A",
				CenterName: "EARTH",
				RefFrame:   "TOD",
				TimeSystem: "UTC",
			}
			got, err := ParseOPM(exampleWithKep)

			assert.Nil(t, err)
			assert.Equal(t, expected, got.MetaData)
		})

		t.Run("with covariance", func(t *testing.T) {
			expected := OPMMetaData{
				Comments:   []string{"GEOCENTRIC, CARTESIAN, EARTH FIXED"},
				ObjectName: "OSPREY 5",
				ObjectId:   "2022-999A",
				CenterName: "EARTH",
				RefFrame:   "ITRF1997",
				TimeSystem: "UTC",
			}
			got, err := ParseOPM(exampleWithCov)

			assert.Nil(t, err)
			assert.Equal(t, expected, got.MetaData)
		})

		t.Run("with parameters", func(t *testing.T) {
			expected := OPMMetaData{
				ObjectName: "EUTELSAT W4",
				ObjectId:   "2021-028A",
				CenterName: "EARTH",
				RefFrame:   "TOD",
				TimeSystem: "UTC",
			}
			got, err := ParseOPM(exampleWithParams)

			assert.Nil(t, err)
			assert.Equal(t, expected, got.MetaData)
		})
	})
}
